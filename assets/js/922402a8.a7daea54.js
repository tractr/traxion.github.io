"use strict";(self.webpackChunk_trxn_traxion_api=self.webpackChunk_trxn_traxion_api||[]).push([[255],{609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var r=n(7896),a=n(1461),i=(n(2784),n(876)),o=["components"],s={id:"getting-started",title:"Getting started",sidebar_label:"Getting started",slug:"/"},l=void 0,p={unversionedId:"Overview/getting-started",id:"Overview/getting-started",title:"Getting started",description:"Introduction",source:"@site/docs/01-Overview/02-getting-started.md",sourceDirName:"01-Overview",slug:"/",permalink:"/",draft:!1,editUrl:"https://github.com/tractr/traxion/tree/main/apps/docs/docs/01-Overview/02-getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"getting-started",title:"Getting started",sidebar_label:"Getting started",slug:"/"},sidebar:"mySidebar",previous:{title:"Main concepts",permalink:"/Overview/main-concepts"},next:{title:"Prisma Configuration",permalink:"/Overview/prisma-configuration"}},u={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Installing Dependencies",id:"installing-dependencies",level:2},{value:"Configuring the Generator within the Prisma Schema",id:"configuring-the-generator-within-the-prisma-schema",level:2},{value:"Generating Your Code",id:"generating-your-code",level:2},{value:"Configuring Your NestJS App",id:"configuring-your-nestjs-app",level:2}],d={toc:c},m="wrapper";function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this guide, we will explore how to generate code for a NestJS application from a Prisma schema with the help of Traxion, a collection of Node.js libraries. NestJS, a widely used Node.js framework, offers a robust foundation for building scalable and modular applications, while Prisma is a modern Node.js ORM that simplifies database interactions. Let's dive right in!"),(0,i.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,i.kt)("p",null,"This guide assumes that you have a NestJS application with a configured Prisma schema. You can refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/recipes/prisma#set-up-prisma"},"nestjs documentation")," for Prisma setup information."),(0,i.kt)("p",null,"Ensure that your NestJS application with a Prisma schema is correctly linked to your database (SQLite, PostgreSQL, or others), and is able to run ",(0,i.kt)("inlineCode",{parentName:"p"},"npx prisma generate"),"."),(0,i.kt)("h2",{id:"installing-dependencies"},"Installing Dependencies"),(0,i.kt)("p",null,"Traxion is a Prisma generator that utilizes the data within Prisma to create a fully functional GraphQL API. Let's start by installing the Traxion generator dependency:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i -D @trxn/prisma-traxion-generator\n")),(0,i.kt)("p",null,"The generated code will need certain Node packages to run effectively. Install these packages in your app using the command below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save \\\n  @trxn/nestjs-database \\\n  @trxn/nestjs-casl \\\n  @trxn/nestjs-core \\\n  @trxn/nestjs-graphql \\\n  @nestjs/apollo \\\n  @nestjs/graphql \\\n  @paljs/plugins \\\n  @casl/ability \\\n  @casl/prisma \\\n  class-transformer\n")),(0,i.kt)("h2",{id:"configuring-the-generator-within-the-prisma-schema"},"Configuring the Generator within the Prisma Schema"),(0,i.kt)("p",null,"Add the following lines to your schema:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},'generator traxion {\n  provider         = "traxion-prisma-generator"\n  // Relative to the schema.prisma file\n  output           = "../src/generated"\n  // Path relative to the output directory\n  tsConfigFilePath = "../../tsconfig.json"\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," directory will contain your generated files. Avoid adding any code here as it will be replaced every time you run Prisma generate."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"tsConfigFilePath")," should point to a valid ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", which will help configure tsMorph correctly according to your application's TypeScript configuration."),(0,i.kt)("p",null,"This generator relies on a specific ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," table with certain constraints. This guide doesn't cover user configuration. When using this generator for the first time, use the following minimal ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," model:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-prisma"},'model User {\n  id       Int    @id @default(autoincrement())\n  email    String @unique\n  /// @trxn/role\n  role     String @default("user")\n  /// @trxn/hidden\n  /// @trxn/encrypted\n  password String\n}\n')),(0,i.kt)("h2",{id:"generating-your-code"},"Generating Your Code"),(0,i.kt)("p",null,"Now that Prisma is fully configured, you can generate your code in the standard Prisma way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npx prisma generate\n")),(0,i.kt)("p",null,"Post-generation, you'll find the generated code in the directory specified in your schema."),(0,i.kt)("p",null,"Please note that Traxion does not handle file formatting. This process is project-specific, so we recommend incorporating a format step in your generation process (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "scripts": {\n    ...\n    "generate": "npx prisma generate && npm run format"\n  }\n  ...\n}\n')),(0,i.kt)("p",null,"It's also important not to version the generated code and let your CI/CD process handle this step during app deployment."),(0,i.kt)("h2",{id:"configuring-your-nestjs-app"},"Configuring Your NestJS App"),(0,i.kt)("p",null,"Lastly, you can import ",(0,i.kt)("inlineCode",{parentName:"p"},"TraxionModule")," from the generated folder and utilize it in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app.module.ts"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Module } from '@nestjs/common';\nimport { TraxionModule } from './generated/modules/traxion.module';\n\n@Module({\n  imports: [TraxionModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n")),(0,i.kt)("p",null,"Now, you're all set! Launch your app and enjoy your fully-featured, authorized GraphQL API."))}g.isMDXComponent=!0},876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,g=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);