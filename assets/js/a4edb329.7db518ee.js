"use strict";(self.webpackChunk_trxn_traxion_api=self.webpackChunk_trxn_traxion_api||[]).push([[9912],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?o.createElement(g,l(l({ref:t},u),{},{components:n})):o.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5205:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],i={id:"index",title:"AWS S3",sidebar_label:"AWS S3"},s=void 0,p={unversionedId:"how-to/services/aws-s3/index",id:"how-to/services/aws-s3/index",title:"AWS S3",description:"Introduction",source:"@site/docs/how-to/services/aws-s3/index.md",sourceDirName:"how-to/services/aws-s3",slug:"/how-to/services/aws-s3/",permalink:"/traxion.github.io/docs/how-to/services/aws-s3/",draft:!1,editUrl:"https://github.com/tractr/traxion/tree/main/apps/docs/docs/how-to/services/aws-s3/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"AWS S3",sidebar_label:"AWS S3"},sidebar:"documentation",previous:{title:"Authentication",permalink:"/traxion.github.io/docs/how-to/services/authentication/"},next:{title:"Mailjet",permalink:"/traxion.github.io/docs/how-to/services/mailjet/"}},u={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Upload a file to the file storage with a presigned url",id:"upload-a-file-to-the-file-storage-with-a-presigned-url",level:2},{value:"Temporary files",id:"temporary-files",level:2},{value:"Download a file from the file storage with a presigned url",id:"download-a-file-from-the-file-storage-with-a-presigned-url",level:2},{value:"Custom operations",id:"custom-operations",level:2},{value:"Other file manipulations",id:"other-file-manipulations",level:2}],c={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Files storage, management and distribution is a common task for web\napplications. However this can quickly become a heavy task to handle for your\nnodejs application and it is usually preferable to delegate it to a specialize\nfile storage service like AWS S3 or Minio."),(0,r.kt)("p",null,"One of the most common task is to upload a user file, lets say its avatar\npicture, to the file storage. This upload involve three parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Your backend application that is in charge to negociate a presigned upload url\nwith the file storage"),(0,r.kt)("li",{parentName:"ul"},"Your frontend application, that should request this upload presigned url to\nthe backend and then upload the user photo to the file storage."),(0,r.kt)("li",{parentName:"ul"},"The file storage service itself.")),(0,r.kt)("p",null,"That's why we provides the next two packages to interact with the file storage\nservice:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"@trxn/nestjs-file-storage")," allows to connect your nestjs backend\napplication to a file storage service to manipulate files and negoticate\npresigned urls.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"@trxn/angular-file-storage")," contains helpers to connect your frontend\napplication to your backend and to the file storage service."))),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First you need to install the packages to the\nproject:",(0,r.kt)("inlineCode",{parentName:"p"},"npm i --save @trxn/nestjs-file-storage tractr/angular-file-storage"),"."),(0,r.kt)("p",null,"Both packages expose modules that extends the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModuleOptionsFactory")," and must be\nrespectively imported in your backend and frontend app and registered with their\nconfiguration."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"apps/api/src/app/app.module.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Module } from '@nestjs/common';\n\nimport {\n  FileStorageController,\n  FileStorageModule,\n  PresignedDownloadConfiguration,\n  PresignedUploadConfiguration,\n} from '@trxn/nestjs-file-storage';\n\n@Module({\n  imports: [\n    FileStorageModule.register({\n      accessKey: 'minio',\n      secretKey: 'password',\n      endPoint: 'localhost',\n      port: 9000,\n      useSSL: false,\n      defaultBucket: 'bucket',\n      presignedDownload: {} as PresignedDownloadConfiguration,\n      presignedUpload: {} as PresignedUploadConfiguration,\n    }),\n  ],\n})\nexport class AppModule {}\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"apps/pwa/src/app/app.module.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { NgModule } from '@angular/core';\n\nimport { FileStorageModule } from '@trxn/angular-file-storage';\n\n@NgModule({\n  imports: [\n    FileStorageModule.register({\n      defaultBucket: 'bucket',\n      presignedUploadEndpoint: 'upload',\n      presignedDownloadEndpoint: 'download',\n    }),\n  ],\n})\nexport class AppModule {}\n")),(0,r.kt)("p",null,"The configuration expected by the register method is available via the\ntypescript interfaces or in the source code:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tractr/traxion/blob/main/libs/nestjs/file-storage/src/lib/interfaces/file-storage-configuration-public.interface.ts"},"@trxn/nestjs-file-storage configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/tractr/traxion/blob/main/libs/angular/file-storage/src/lib/interfaces/file-storage-configuration.interface.ts"},"@trxn/angular-file-storage configuration"))),(0,r.kt)("p",null,"For more details about registering a module that extends ",(0,r.kt)("inlineCode",{parentName:"p"},"ModuleOptionsFactory"),",\nplease refer to the documentation: LINK."),(0,r.kt)("h2",{id:"upload-a-file-to-the-file-storage-with-a-presigned-url"},"Upload a file to the file storage with a presigned url"),(0,r.kt)("p",null,"Has explained precedently, this is the most frequent use case for a file storage\nservice. If you application does not need to execute custom logic when uploading\na file to the file storage, you can use the perbuild ",(0,r.kt)("inlineCode",{parentName:"p"},"FileStorageController"),".\nSimply import it from ",(0,r.kt)("inlineCode",{parentName:"p"},"@trxn/nestjs-file-storage")," and add it to your\n",(0,r.kt)("inlineCode",{parentName:"p"},"app.module.ts"),"."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"apps/api/src/app/app.module.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"@Module({\n  imports: [\n    FileStorageModule.register({\n      accessKey: 'minio',\n      secretKey: 'password',\n      endPoint: 'localhost',\n      port: 9000,\n      useSSL: false,\n      defaultBucket: 'bucket',\n      presignedDownload: {} as PresignedDownloadConfiguration,\n      presignedUpload: {} as PresignedUploadConfiguration,\n    }),\n  ],\n  controllers: [FileStorageController],\n})\nexport class AppModule {}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FileStorageController")," exposes two endpoints:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"upload")," endpoint can be used to request an upload presigned token."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"download")," endpoint can be used to request a download presigned token.")),(0,r.kt)("p",null,"On the frontend side of your application, you can use the\n",(0,r.kt)("inlineCode",{parentName:"p"},"tractr-file-storage-upload-button")," button component exported from\n",(0,r.kt)("inlineCode",{parentName:"p"},"@trxn/angular-file-storage")," to automatically send files uploaded by the users\nto the file storage."),(0,r.kt)("p",null,"Then you should listen to the ",(0,r.kt)("inlineCode",{parentName:"p"},"uploadResult")," event to get information about the\nuploaded file."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"your-angular-component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<tractr-file-storage-upload-button\n  acceptedFileTypes="image/jpeg,impage/png"\n  sizeLimit="1000"\n  (uploadResult)="handleUploadResult($event)"\n>\n  Upload\n</tractr-file-storage-upload-button>\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"your-angular-component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component, EventEmitter, Output } from '@angular/core';\nimport { FileStorageUploadResult } from '@trxn/angular-file-storage';\n\n@Component({\n  selector: 'app-atom-gallery-photo-selector',\n  templateUrl: './atom-gallery-photo-selector.component.html',\n  styleUrls: ['./atom-gallery-photo-selector.component.less'],\n})\nexport class YourAngularComponent {\n  @Output() photoUploaded = new EventEmitter<FileStorageUploadResult>();\n\n  handleUploadResult(uploadResult: FileStorageUploadResult): void {\n    this.photoUpdated.emit(uploadResult);\n    console.log(uploadResult);\n    /* uploadResult\n    {\n      url: string // Url of the uploaded file\n      mimeType: string // MIME type of the uploaded file\n      size: number // File size (in bits)\n    }\n    */\n  }\n}\n")),(0,r.kt)("h2",{id:"temporary-files"},"Temporary files"),(0,r.kt)("h2",{id:"download-a-file-from-the-file-storage-with-a-presigned-url"},"Download a file from the file storage with a presigned url"),(0,r.kt)("h2",{id:"custom-operations"},"Custom operations"),(0,r.kt)("h2",{id:"other-file-manipulations"},"Other file manipulations"))}m.isMDXComponent=!0}}]);