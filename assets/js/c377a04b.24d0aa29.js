"use strict";(self.webpackChunk_trxn_traxion_api=self.webpackChunk_trxn_traxion_api||[]).push([[971],{2693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>m});var a=n(7896),r=n(1461),s=(n(2784),n(876)),l=["components"],i={id:"getting-started",title:"Getting started",sidebar_label:"Getting started"},o=void 0,p={unversionedId:"getting-started",id:"getting-started",title:"Getting started",description:"Introduction",source:"@site/docs/index.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/tractr/traxion/tree/main/apps/docs/docs/index.md",tags:[],version:"current",frontMatter:{id:"getting-started",title:"Getting started",sidebar_label:"Getting started"},sidebar:"documentation"},d={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Pre-requisites",id:"pre-requisites",level:2},{value:"Step 1: Initialize a NestJS application",id:"step-1-initialize-a-nestjs-application",level:2},{value:"Step 2: Integrate Prisma into the NestJS project",id:"step-2-integrate-prisma-into-the-nestjs-project",level:2},{value:"Step 3: Set up Prisma",id:"step-3-set-up-prisma",level:2},{value:"Step 4: Set up a PostgreSQL database",id:"step-4-set-up-a-postgresql-database",level:2},{value:"Configure environment variables",id:"configure-environment-variables",level:3},{value:"Step 5: Install Prisma generator libraries",id:"step-5-install-prisma-generator-libraries",level:2},{value:"Libraries overview",id:"libraries-overview",level:3},{value:"Install libraries",id:"install-libraries",level:3},{value:"Step 6: Define a Prisma schema",id:"step-6-define-a-prisma-schema",level:2},{value:"Add models",id:"add-models",level:3},{value:"Configure Prisma generators",id:"configure-prisma-generators",level:3},{value:"<code>prisma-nestjs-graphql</code> generator",id:"prisma-nestjs-graphql-generator",level:4},{value:"<code>@trxn/prisma-nestjs-services-generator</code> generator",id:"trxnprisma-nestjs-services-generator-generator",level:4},{value:"<code>@trxn/prisma-nestjs-graphql-resolvers-generator</code> generator",id:"trxnprisma-nestjs-graphql-resolvers-generator-generator",level:4},{value:"Step 7: Generate NestJS services and DTOs",id:"step-7-generate-nestjs-services-and-dtos",level:2},{value:"Step 8: Set up the database using Prisma",id:"step-8-set-up-the-database-using-prisma",level:2},{value:"Verify the database using Prisma Studio",id:"verify-the-database-using-prisma-studio",level:3},{value:"Step 9: Create NestJS modules",id:"step-9-create-nestjs-modules",level:2},{value:"Prisma module",id:"prisma-module",level:3},{value:"Services module",id:"services-module",level:3},{value:"GraphQL module",id:"graphql-module",level:3},{value:"Import GraphQL Module into App Module",id:"import-graphql-module-into-app-module",level:3},{value:"Step 10: Run the application",id:"step-10-run-the-application",level:2},{value:"Step 11: Test the application",id:"step-11-test-the-application",level:2},{value:"Create a user",id:"create-a-user",level:3},{value:"Create a post related to the user",id:"create-a-post-related-to-the-user",level:3},{value:"Get users with their posts",id:"get-users-with-their-posts",level:3},{value:"Step 12: Modify Prisma schema and regenerate NestJS services and DTOs",id:"step-12-modify-prisma-schema-and-regenerate-nestjs-services-and-dtos",level:2},{value:"Update the Prisma schema",id:"update-the-prisma-schema",level:3},{value:"Regenerate NestJS services and DTOs",id:"regenerate-nestjs-services-and-dtos",level:3},{value:"Migrate the database",id:"migrate-the-database",level:3},{value:"Step 13: Test the new schema",id:"step-13-test-the-new-schema",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:m},c="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,l);return(0,s.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"In this tutorial, we will learn how to generate code for a NestJS application from a Prisma schema using a set of\nNode.js libraries. NestJS is a popular Node.js framework that provides a robust platform for building scalable and\nmodular applications. Prisma, on the other hand, is a modern ORM for Node.js that makes it easy to interact with\ndatabases."),(0,s.kt)("p",null,"We will be using three libraries - ",(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-services-generator"),"\n, ",(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-graphql-resolvers-generator"),",\nand ",(0,s.kt)("inlineCode",{parentName:"p"},"prisma-nestjs-graphql")," - to generate NestJS services, GraphQL resolvers, DTOs, and schemas based on a Prisma\nschema.By the end of this tutorial, you will be able to generate a complete NestJS application with CRUD operations and\na GraphQL API from a Prisma schema with just a few commands."),(0,s.kt)("p",null,"Let's get started!"),(0,s.kt)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,s.kt)("p",null,"Before we begin, make sure you have the following prerequisites installed on your computer:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Node.js"),": You can download the latest version of Node.js from the official website: ",(0,s.kt)("a",{parentName:"p",href:"https://nodejs.org/en/"},"https://nodejs.org/en/")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"NestJS CLI"),": Install the NestJS CLI by running the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install -g @nestjs/cli\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Docker"),": If you don't have a database installed on your computer, we recommend using Docker to run a PostgreSQL\ncontainer. You can download and install Docker from the official website: ",(0,s.kt)("a",{parentName:"p",href:"https://www.docker.com/products/docker-desktop"},"https://www.docker.com/products/docker-desktop")),(0,s.kt)("p",null,"Make sure you have a basic understanding of Node.js, NestJS, GraphQL, and Prisma before starting this tutorial. We will\nbe\ngenerating code for a simple application, so it would be helpful if you have a basic understanding of these\ntechnologies."),(0,s.kt)("h2",{id:"step-1-initialize-a-nestjs-application"},"Step 1: Initialize a NestJS application"),(0,s.kt)("p",null,"To begin, create a new NestJS project by executing the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"nest new nestjs-prisma-demo\n")),(0,s.kt)("p",null,"Follow the prompts to set up the new project. Once the project has been created, navigate to its directory:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"cd nestjs-prisma-demo\n")),(0,s.kt)("p",null,"Now that the initial NestJS application is in place, you're ready to move forward with installing Prisma."),(0,s.kt)("h2",{id:"step-2-integrate-prisma-into-the-nestjs-project"},"Step 2: Integrate Prisma into the NestJS project"),(0,s.kt)("p",null,"In this step, you'll install Prisma into your NestJS project. Execute the following command in your terminal to add\nPrisma as a development dependency:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install prisma --save-dev\n")),(0,s.kt)("h2",{id:"step-3-set-up-prisma"},"Step 3: Set up Prisma"),(0,s.kt)("p",null,"Now it's time to set up Prisma within your NestJS project. To initialize Prisma, execute the following command in your\nterminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx prisma init\n")),(0,s.kt)("h2",{id:"step-4-set-up-a-postgresql-database"},"Step 4: Set up a PostgreSQL database"),(0,s.kt)("p",null,"In this step, you'll create a PostgreSQL database. We'll use Docker to run a PostgreSQL container. If you already have a\nPostgreSQL database installed on your computer, feel free to skip this step."),(0,s.kt)("p",null,"Execute the following command in your terminal to create a PostgreSQL container:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"docker run --name nestjs-prisma-demo -e POSTGRES_PASSWORD=passwd -e POSTGRES_USER=user -e POSTGRES_DB=demo -p 5432:5432 -d postgres\n")),(0,s.kt)("p",null,"Alternatively, you can create a PostgreSQL database using Docker Compose. Create a ",(0,s.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file in your\nproject directory and add the following configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.1'\n\nservices:\n  postgres:\n    image: postgres\n    environment:\n      POSTGRES_PASSWORD: passwd\n      POSTGRES_USER: user\n      POSTGRES_DB: db\n    ports:\n      - 5432:5432\n")),(0,s.kt)("p",null,"To start the container, execute the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"docker-compose up -d\n")),(0,s.kt)("h3",{id:"configure-environment-variables"},"Configure environment variables"),(0,s.kt)("p",null,"Now, update the environment variables in the ",(0,s.kt)("inlineCode",{parentName:"p"},".env")," file. Open the ",(0,s.kt)("inlineCode",{parentName:"p"},".env")," file and modify the following line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'DATABASE_URL="postgresql://user:passwd@localhost:5432/demo?schema=public"\n')),(0,s.kt)("p",null,"This will be useful when we will start the NestJS application."),(0,s.kt)("h2",{id:"step-5-install-prisma-generator-libraries"},"Step 5: Install Prisma generator libraries"),(0,s.kt)("h3",{id:"libraries-overview"},"Libraries overview"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-services-generator"),": Generates NestJS services based on a Prisma schema, providing CRUD operations\nfor each model in the schema."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-graphql-resolvers-generator"),": Creates GraphQL resolvers based on a Prisma schema, offering GraphQL\nqueries and mutations for each model in the schema."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"prisma-nestjs-graphql"),": Produces NestJS DTOs (Data Transfer Objects) and a GraphQL schema from a Prisma schema,\nensuring validation of incoming data and consistency in the application. The GraphQL schema defines the API structure\nand available queries and mutations."),(0,s.kt)("h3",{id:"install-libraries"},"Install libraries"),(0,s.kt)("p",null,"Now it's time to install the generator libraries. Execute the following command in your terminal to install them:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save-dev @trxn/prisma-nestjs-graphql-resolvers-generator @trxn/prisma-nestjs-services-generator prisma-nestjs-graphql\n")),(0,s.kt)("p",null,"Additionally, you'll need to install the following dependencies to utilize the generated code:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm install --save @nestjs/apollo @nestjs/graphql @paljs/plugins @prisma/client @trxn/nestjs-database @trxn/nestjs-graphql prisma\n")),(0,s.kt)("h2",{id:"step-6-define-a-prisma-schema"},"Step 6: Define a Prisma schema"),(0,s.kt)("p",null,"In this step, you'll create a Prisma schema. Navigate to the ",(0,s.kt)("inlineCode",{parentName:"p"},"prisma")," directory and open the ",(0,s.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file."),(0,s.kt)("h3",{id:"add-models"},"Add models"),(0,s.kt)("p",null,"Add the following models to the schema:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prisma"},"model User {\n  id        Int      @id @default(autoincrement())\n  name      String\n  email     String   @unique\n  posts     Post[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  content   String\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n")),(0,s.kt)("h3",{id:"configure-prisma-generators"},"Configure Prisma generators"),(0,s.kt)("p",null,"Next, you'll declare the Prisma generators. Add the following configuration to the ",(0,s.kt)("inlineCode",{parentName:"p"},"generator")," block:"),(0,s.kt)("h4",{id:"prisma-nestjs-graphql-generator"},(0,s.kt)("inlineCode",{parentName:"h4"},"prisma-nestjs-graphql")," generator"),(0,s.kt)("p",null,"Add this block to enable the ",(0,s.kt)("inlineCode",{parentName:"p"},"prisma-nestjs-graphql")," generator:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prisma"},'// Nestjs graphql dto generator\ngenerator nestjsGraphql {\n  provider                      = "prisma-nestjs-graphql"\n  output                        = "../src/nestjs-graphql-dtos"\n  purgeOutput                   = true\n  reExport                      = Single\n  noAtomicOperations            = true\n  fields_Validator_from         = "class-validator"\n  fields_Validator_input        = true\n  useInputType_StringFilter_ALL = "string"\n}\n')),(0,s.kt)("p",null,"For more information about the ",(0,s.kt)("inlineCode",{parentName:"p"},"prisma-nestjs-graphql")," generator, see\nthe ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/prisma-nestjs-graphql"},"prisma-nestjs-graphql")," documentation."),(0,s.kt)("h4",{id:"trxnprisma-nestjs-services-generator-generator"},(0,s.kt)("inlineCode",{parentName:"h4"},"@trxn/prisma-nestjs-services-generator")," generator"),(0,s.kt)("p",null,"Add this block to enable the ",(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-services-generator")," generator:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prisma"},'generator nestjsServices {\n  provider = "trxn-prisma-nestjs-services-generator"\n  output   = "../src/nestjs-services"\n  tsConfigFilePath   = "../../tsconfig.json"\n}\n')),(0,s.kt)("p",null,"You need to specify the path to the ",(0,s.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file. This is required to configure ",(0,s.kt)("a",{parentName:"p",href:"https://ts-morph.com/"},"TSMorph"),"\n."),(0,s.kt)("h4",{id:"trxnprisma-nestjs-graphql-resolvers-generator-generator"},(0,s.kt)("inlineCode",{parentName:"h4"},"@trxn/prisma-nestjs-graphql-resolvers-generator")," generator"),(0,s.kt)("p",null,"Add this block to enable the ",(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-graphql-resolvers-generator")," generator:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prisma"},'generator graphqlResolvers {\n  provider = "trxn-prisma-nestjs-graphql-resolvers-generator"\n  output = "../src/nestjs-resolvers"\n\n  // Path relative to the output directory\n  tsConfigFilePath   = "../../tsconfig.json"\n  nestjsServicesImportPath = "./nestjs-services"\n  nestjsGraphqlDtosImportPath = "./nestjs-graphql-dtos"\n}\n')),(0,s.kt)("p",null,"Similar to the previous generator, you need to specify the path to the ",(0,s.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"nestjsServicesImportPath")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"nestjsGraphqlDtosImportPath")," options specify the relative path from the parent\ndirectory of the path defined in the output option to the output directory of\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"@trxn/prisma-nestjs-services-generator")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"prisma-nestjs-graphql")," generators, respectively."),(0,s.kt)("h2",{id:"step-7-generate-nestjs-services-and-dtos"},"Step 7: Generate NestJS services and DTOs"),(0,s.kt)("p",null,"With the Prisma schema in place, you can now generate NestJS services and DTOs. Execute the following command in your\nterminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx prisma generate\n")),(0,s.kt)("h2",{id:"step-8-set-up-the-database-using-prisma"},"Step 8: Set up the database using Prisma"),(0,s.kt)("p",null,"Proceed to set up the database with Prisma by running the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx prisma db push\n")),(0,s.kt)("h3",{id:"verify-the-database-using-prisma-studio"},"Verify the database using Prisma Studio"),(0,s.kt)("p",null,"Next, verify the database using Prisma Studio. Run the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx prisma studio\n")),(0,s.kt)("p",null,"You should see the ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Post")," tables in the database, both empty at this stage."),(0,s.kt)("h2",{id:"step-9-create-nestjs-modules"},"Step 9: Create NestJS modules"),(0,s.kt)("h3",{id:"prisma-module"},"Prisma module"),(0,s.kt)("p",null,"First, create the Prisma module. Navigate to the ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," directory and create a file called ",(0,s.kt)("inlineCode",{parentName:"p"},"database.module.ts")," with the\nfollowing content:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Module} from '@nestjs/common';\nimport {DatabaseModule} from '@trxn/nestjs-database';\n\n@Module({\n    imports: [DatabaseModule.register({})],\n    exports: [DatabaseModule],\n})\nexport class PrismaModule {\n}\n")),(0,s.kt)("h3",{id:"services-module"},"Services module"),(0,s.kt)("p",null,"Next, create the services module. In the ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," directory, create a file called ",(0,s.kt)("inlineCode",{parentName:"p"},"services.module.ts")," with the following\ncontent:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Module} from '@nestjs/common';\nimport {PrismaModule} from './database.module';\nimport {ModelsServicesModules} from \"./nestjs-services\";\n\n@Module({\n    imports: [\n        ModelsServicesModules.register({\n            imports: [PrismaModule],\n        }),\n    ],\n    exports: [ModelsServicesModules],\n})\nexport class ServicesModule {\n}\n")),(0,s.kt)("h3",{id:"graphql-module"},"GraphQL module"),(0,s.kt)("p",null,"Now, create the GraphQL module. In the ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," directory, create a file called ",(0,s.kt)("inlineCode",{parentName:"p"},"graphql.module.ts")," with the following\ncontent:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import {ApolloDriver, ApolloDriverConfig} from '@nestjs/apollo';\nimport {Module} from '@nestjs/common';\nimport {GraphQLModule as NestjsGraphQLModule} from '@nestjs/graphql';\n\nimport {GraphqlModule} from './nestjs-resolvers';\nimport {ServicesModule} from './services.module';\n\n@Module({\n    imports: [\n        GraphqlModule.register({\n            imports: [ServicesModule],\n        }),\n        NestjsGraphQLModule.forRoot<ApolloDriverConfig>({\n            driver: ApolloDriver,\n            autoSchemaFile: 'schema.gql',\n            sortSchema: true,\n            persistedQueries: false,\n        }),\n    ],\n    exports: [NestjsGraphQLModule, GraphqlModule],\n})\nexport class GraphQLModule {\n}\n")),(0,s.kt)("h3",{id:"import-graphql-module-into-app-module"},"Import GraphQL Module into App Module"),(0,s.kt)("p",null,"Lastly, import the GraphQL module into the App module. Go to the ",(0,s.kt)("inlineCode",{parentName:"p"},"src")," directory and open the ",(0,s.kt)("inlineCode",{parentName:"p"},"app.module.ts")," file."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"app.module.ts")," should look like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Module} from '@nestjs/common';\nimport {GraphQLModule} from \"./graphql.module\";\n\n@Module({\n    imports: [GraphQLModule],\n    controllers: [],\n    providers: [],\n})\nexport class AppModule {\n}\n")),(0,s.kt)("h2",{id:"step-10-run-the-application"},"Step 10: Run the application"),(0,s.kt)("p",null,"With the Prisma schema, NestJS services, and DTOs created, you can now start the application. Execute the following\ncommand in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm run start:dev\n")),(0,s.kt)("p",null,"Upon running the command, your application will start in development mode. You can now interact with your NestJS\napplication and test the generated GraphQL API."),(0,s.kt)("h2",{id:"step-11-test-the-application"},"Step 11: Test the application"),(0,s.kt)("p",null,"With the application running, you can now test it. Open your browser and visit the following URL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"http://localhost:3000/graphql\n")),(0,s.kt)("p",null,"You should see the GraphQL playground. For more information about the GraphQL playground, refer to\nthe ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/v2/testing/graphql-playground/"},"GraphQL playground")," documentation."),(0,s.kt)("h3",{id:"create-a-user"},"Create a user"),(0,s.kt)("p",null,"Try creating a user with the following mutation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},'mutation {\n  createUser(data: { email: "user@email.com", name: "User" }) {\n    id\n    email\n    name\n  }\n}\n')),(0,s.kt)("p",null,"You should receive the created user."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createUser": {\n      "id": "1",\n      "email": "user@email.com",\n      "name": "User"\n    }\n  }\n}\n')),(0,s.kt)("h3",{id:"create-a-post-related-to-the-user"},"Create a post related to the user"),(0,s.kt)("p",null,"Try creating a post related to the user with the following mutation:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation createPost($post: PostCreateInput!) {\n  createPost(data: $post) {\n    id\n    title\n    content\n    author {\n      id\n      email\n      name\n    }\n  }\n}\n")),(0,s.kt)("p",null,"with the following variables:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "post": {\n    "title": "Lorem ipsum",\n    "content": "Lorem ipsum dolor sit amet",\n    "author": {\n      "connect": {\n        "id": 1\n      }\n    }\n  }\n}\n')),(0,s.kt)("p",null,"You should receive the created post."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "createPost": {\n      "id": "2",\n      "title": "Lorem ipsum",\n      "content": "Lorem ipsum dolor sit amet",\n      "author": {\n        "id": "1",\n        "email": "user@email.com",\n        "name": "User"\n      }\n    }\n  }\n}\n')),(0,s.kt)("h3",{id:"get-users-with-their-posts"},"Get users with their posts"),(0,s.kt)("p",null,"Try retrieving users with their posts using the following query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  findManyUsers {\n    count\n    users {\n      id\n      email\n      name\n      posts {\n        id\n        title\n        content\n      }\n    }\n  }\n}\n")),(0,s.kt)("p",null,"You should receive the users with their posts."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "findManyUsers": {\n      "count": 1,\n      "users": [\n        {\n          "id": "1",\n          "email": "user@email.com",\n          "name": "User",\n          "posts": [\n            {\n              "id": "1",\n              "title": "Lorem ipsum",\n              "content": "Lorem ipsum dolor sit amet"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n')),(0,s.kt)("h2",{id:"step-12-modify-prisma-schema-and-regenerate-nestjs-services-and-dtos"},"Step 12: Modify Prisma schema and regenerate NestJS services and DTOs"),(0,s.kt)("h3",{id:"update-the-prisma-schema"},"Update the Prisma schema"),(0,s.kt)("p",null,"Open the ",(0,s.kt)("inlineCode",{parentName:"p"},"prisma/schema.prisma")," file and modify the ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," model as follows:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-prisma"},"model User {\n  id        Int      @id @default(autoincrement())\n  name      String\n  email     String   @unique\n  emailConfirmed Boolean  @default(false)\n  posts     Post[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n")),(0,s.kt)("p",null,"We've added the ",(0,s.kt)("inlineCode",{parentName:"p"},"emailConfirmed")," field to the ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," model."),(0,s.kt)("h3",{id:"regenerate-nestjs-services-and-dtos"},"Regenerate NestJS services and DTOs"),(0,s.kt)("p",null,"Next, regenerate the NestJS services and DTOs by running the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx prisma generate\n")),(0,s.kt)("h3",{id:"migrate-the-database"},"Migrate the database"),(0,s.kt)("p",null,"Finally, migrate the database by executing the following command in your terminal:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npx prisma db push\n")),(0,s.kt)("p",null,"With these changes, your application will now include the ",(0,s.kt)("inlineCode",{parentName:"p"},"emailConfirmed")," field in the ",(0,s.kt)("inlineCode",{parentName:"p"},"User")," model, and the generated\nservices and DTOs will reflect this update."),(0,s.kt)("h2",{id:"step-13-test-the-new-schema"},"Step 13: Test the new schema"),(0,s.kt)("p",null,"Restart the server using the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"npm run start:dev\n")),(0,s.kt)("p",null,"Open your browser and visit the following URL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"http://localhost:3000/graphql\n")),(0,s.kt)("p",null,"Retrieve the users and the new ",(0,s.kt)("inlineCode",{parentName:"p"},"emailConfirmed")," field with the following query:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"query {\n  findManyUsers {\n    count\n    users {\n      id\n      email\n      name\n      emailConfirmed\n      posts {\n        id\n        title\n        content\n      }\n    }\n  }\n}\n")),(0,s.kt)("p",null,"You should receive the users with the new ",(0,s.kt)("inlineCode",{parentName:"p"},"emailConfirmed")," field."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "findManyUsers": {\n      "count": 1,\n      "users": [\n        {\n          "id": "1",\n          "email": "user@email.com",\n          "name": "User",\n          "emailConfirmed": false,\n          "posts": [\n            {\n              "id": "1",\n              "title": "Lorem ipsum",\n              "content": "Lorem ipsum dolor sit amet"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n')),(0,s.kt)("h2",{id:"conclusion"},"Conclusion"),(0,s.kt)("p",null,"In this tutorial, we've demonstrated how to generate a NestJS application with a GraphQL API from a Prisma schema. We\ncovered the setup of Prisma, generator libraries, and a PostgreSQL database, as well as defining models, generating\nservices, DTOs, and GraphQL resolvers."),(0,s.kt)("p",null,"Our application now has a solid foundation, but there's more to do. In a future tutorial, we will introduce another\ngenerator for implementing authentication and authorization in the NestJS/GraphQL server, adding a crucial security\nlayer to our application."),(0,s.kt)("p",null,"Stay tuned for the next tutorial, and good luck with your continued development journey!"))}h.isMDXComponent=!0},876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(o,".").concat(c)]||m[c]||u[c]||s;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);