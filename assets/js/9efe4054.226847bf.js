"use strict";(self.webpackChunk_trxn_traxion_api=self.webpackChunk_trxn_traxion_api||[]).push([[472],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,h=p["".concat(d,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={id:"generated-vs-custom-code",title:"Generated code vs. custom code",sidebar_label:"Generated & custom code"},d=void 0,l={unversionedId:"get-started/generated-vs-custom-code",id:"get-started/generated-vs-custom-code",title:"Generated code vs. custom code",description:"Traxion relies partially on code generation via Hapify. This engine creates code for CRUD operations (create, read, update, delete, search, count) based on data models.",source:"@site/docs/get-started/generated-vs-custom-code.md",sourceDirName:"get-started",slug:"/get-started/generated-vs-custom-code",permalink:"/docs/get-started/generated-vs-custom-code",draft:!1,editUrl:"https://github.com/tractr/traxion/tree/main/apps/docs/docs/get-started/generated-vs-custom-code.md",tags:[],version:"current",frontMatter:{id:"generated-vs-custom-code",title:"Generated code vs. custom code",sidebar_label:"Generated & custom code"},sidebar:"documentation",previous:{title:"Get started",permalink:"/docs/get-started/"},next:{title:"Configure lazy loading",permalink:"/docs/how-to/angular/configure-lazy-loading"}},c={},p=[],u={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Traxion relies partially on code generation via ",(0,a.kt)("a",{parentName:"p",href:"https://docs.hapify.io/"},"Hapify"),". This engine creates code for CRUD operations (",(0,a.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"read"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"update"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"delete"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"search"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"count"),") based on data models.\nSome libraries have generated code, some do not. This document describes how the libraries with generated code are organized."),(0,a.kt)("h1",{id:"the-vision"},"The Vision",(0,a.kt)("a",{parentName:"h1",href:"https://docs.amplication.com/how-to/custom-code/#the-vision"})),(0,a.kt)("p",null,"Our goal is for you to be able to add custom code while retaining the ability to update your data model, change permissions, and more."),(0,a.kt)("p",null,"To do so, Traxion always exports the generated code to a ",(0,a.kt)("inlineCode",{parentName:"p"},"generated")," folder which can be extended. You will keep the flexibility of the code while saving time on repetitive tasks with Traxion."),(0,a.kt)("p",null,"The generated code is not directly modified. We try to extend it if we need to add business logic."),(0,a.kt)("h1",{id:"how-it-works"},(0,a.kt)("strong",{parentName:"h1"},"How it works")),(0,a.kt)("p",null,"Let's consider the ",(0,a.kt)("inlineCode",{parentName:"p"},"models-rest")," library. This library exposes the NestJS controllers for the CRUD API, for each of the data model."),(0,a.kt)("p",null,"Let's consider that we have two data models: ",(0,a.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"shop"),"."),(0,a.kt)("p",null,"The library is located ",(0,a.kt)("inlineCode",{parentName:"p"},"libs/nestjs/models-rest")," and structured like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"libs/nestjs/models-rest\n\u251c\u2500\u2500 hapify\n\u2502   \u2514\u2500\u2500 generated\n\u2502       \u2514\u2500\u2500 nestjs-models-rest\n\u2502           \u2514\u2500\u2500 src\n\u2502               \u2514\u2500\u2500 __kebab__\n\u2502                   \u251c\u2500\u2500 controllers\n\u2502                   \u2514\u2500\u2500 services\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 generated\n    \u2502   \u2514\u2500\u2500 nestjs-models-rest\n    \u2502       \u2514\u2500\u2500 src\n    \u2502           \u251c\u2500\u2500 shop\n    \u2502           \u2502   \u251c\u2500\u2500 controllers\n    \u2502           \u2502   \u2514\u2500\u2500 services\n    \u2502           \u2514\u2500\u2500 user\n    \u2502               \u251c\u2500\u2500 controllers\n    \u2502               \u2514\u2500\u2500 services\n    \u251c\u2500\u2500 custom-user\n    \u2502   \u251c\u2500\u2500 controllers\n    \u2502   \u2514\u2500\u2500 services\n    \u2514\u2500\u2500 payment\n        \u251c\u2500\u2500 controllers\n        \u2514\u2500\u2500 services\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"hapify")," folder contains the code templates needed by Hapify."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"src/generated")," folder contains the file generated by Hapify according to the data modeling, here ",(0,a.kt)("inlineCode",{parentName:"li"},"shop")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"user"),". The generated folders are necessarily ignored by Git because the generated code must not be modified."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"custom-user")," folder contains a custom model that extends the base user contained in the ",(0,a.kt)("inlineCode",{parentName:"li"},"src/generated")," folder. This template adds business functionalities to the base generated model."),(0,a.kt)("li",{parentName:"ul"},"Here, the ",(0,a.kt)("inlineCode",{parentName:"li"},"payment")," folder is a business service, not generated by Hapify. It can use or not generated files.")),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"/docs/how-to/nestjs/extend-a-generated-controller"},"following tutorial")," shows how to extend a generated controller."))}m.isMDXComponent=!0}}]);