"use strict";(self.webpackChunk_trxn_traxion_api=self.webpackChunk_trxn_traxion_api||[]).push([[910],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=p(t),u=o,f=l["".concat(c,".").concat(u)]||l[u]||m[u]||i;return t?r.createElement(f,a(a({ref:n},d),{},{components:t})):r.createElement(f,a({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[l]="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9324:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>l});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],s={id:"create-new-service",title:"Create a new service",sidebar_label:"Create a new service"},c="Create a new service",p={unversionedId:"how-to/terraform/create-new-service",id:"how-to/terraform/create-new-service",title:"Create a new service",description:"Before reading this, you should know how ECS components work :",source:"@site/docs/how-to/terraform/create-new-service.md",sourceDirName:"how-to/terraform",slug:"/how-to/terraform/create-new-service",permalink:"/docs/how-to/terraform/create-new-service",draft:!1,editUrl:"https://github.com/tractr/traxion/tree/main/apps/docs/docs/how-to/terraform/create-new-service.md",tags:[],version:"current",frontMatter:{id:"create-new-service",title:"Create a new service",sidebar_label:"Create a new service"},sidebar:"documentation",previous:{title:"ECS components",permalink:"/docs/how-to/terraform/ecs-components"},next:{title:"Add Docusaurus",permalink:"/docs/how-to/documentation/add-docusaurus"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Create a new library using NX",id:"create-a-new-library-using-nx",level:2},{value:"Create the Redis service",id:"create-the-redis-service",level:2},{value:"Redis container",id:"redis-container",level:3},{value:"Configuration and interface",id:"configuration-and-interface",level:3},{value:"Redis component",id:"redis-component",level:3},{value:"Add the Redis service to the stack",id:"add-the-redis-service-to-the-stack",level:2},{value:"Configuration per environments",id:"configuration-per-environments",level:4}],m={toc:l};function u(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-a-new-service"},"Create a new service"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Before reading this, you should know how ECS components work :"),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"/docs/how-to/terraform/ecs-components"},"Understanding the ECS components"))),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"In this tutorial, we are going to write add a Redis service to our application and deploy it."),(0,i.kt)("p",null,"This Redis service is based on the public image from Docker Hub."),(0,i.kt)("h2",{id:"create-a-new-library-using-nx"},"Create a new library using NX"),(0,i.kt)("p",null,"Create a new library in ",(0,i.kt)("inlineCode",{parentName:"p"},"terraform/service/redis"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"nx generate @nrwl/node:library --name redis --directory terraform/service --buildable --importPath @project/terraform-service-redis\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"@project/")," by your project's prefix.")),(0,i.kt)("p",null,"This is the tree of our library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"redis\n\u251c\u2500\u2500 .babelrc\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 details.md\n\u251c\u2500\u2500 .eslintrc.json\n\u251c\u2500\u2500 jest.config.ts\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 project.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u2514\u2500\u2500 lib\n\u2502       \u251c\u2500\u2500 configs\n\u2502       \u2502   \u251c\u2500\u2500 index.ts\n\u2502       \u2502   \u2514\u2500\u2500 redis.config.ts\n\u2502       \u251c\u2500\u2500 index.ts\n\u2502       \u251c\u2500\u2500 interfaces\n\u2502       \u2502   \u251c\u2500\u2500 index.ts\n\u2502       \u2502   \u2514\u2500\u2500 redis.interface.ts\n\u2502       \u251c\u2500\u2500 redis.component.ts\n\u2502       \u2514\u2500\u2500 redis.container.ts\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 tsconfig.lib.json\n\u2514\u2500\u2500 tsconfig.spec.json\n\n4 directories, 19 files\n")),(0,i.kt)("h2",{id:"create-the-redis-service"},"Create the Redis service"),(0,i.kt)("h3",{id:"redis-container"},"Redis container"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// file: src/redis.container.ts\n\nimport { RedisContainerConfig } from './interfaces';\n\nimport { BackendContainer, MountPoint } from '@trxn/terraform-service-ecs';\n\nexport class RedisContainer extends BackendContainer<RedisContainerConfig> {\n  protected getAppName(): string {\n    return 'redis';\n  }\n\n  protected getPort(): number {\n    return 6379;\n  }\n\n  getMountPoints(): MountPoint[] {\n    return [\n      {\n        sourceVolume: 'data',\n        containerPath: '/data',\n      },\n    ];\n  }\n}\n")),(0,i.kt)("p",null,"This class is a subclass of ",(0,i.kt)("inlineCode",{parentName:"p"},"BackendContainer")," and overrides the ",(0,i.kt)("inlineCode",{parentName:"p"},"getAppName")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"getPort")," methods to return the values specific to a Redis container. It also defines a single mount point to a volume called ",(0,i.kt)("inlineCode",{parentName:"p"},"data"),", which will be used to store persistent data for the Redis container."),(0,i.kt)("h3",{id:"configuration-and-interface"},"Configuration and interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// file: src/configs/redis.configs.ts\n\nimport { RedisComponentDefaultConfig } from './interfaces';\nimport {\n  Secret,\n  SERVICE_COMPONENT_DEFAULT_CONFIG,\n} from '@trxn/terraform-service-ecs';\n\nexport const REDIS_COMPONENT_DEFAULT_CONFIG: RedisComponentDefaultConfig = {\n  ...SERVICE_COMPONENT_DEFAULT_CONFIG,\n  containerConfig: {\n    imageTag: 'alpine3.17',\n    environments: {\n      REDIS_PASSWORD: Secret(),\n    },\n  },\n};\n")),(0,i.kt)("p",null,"This file is a configuration file for the ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent")," class in the Redis service library. It defines the default configuration options that can be overridden when creating an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent"),"."),(0,i.kt)("h3",{id:"redis-component"},"Redis component"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// file: src/redis.component.ts\n\nimport {\n  BackendServiceComponent,\n  Container,\n} from '@trxn/terraform-service-ecs';\nimport { RedisContainer } from './redis.container';\nimport { RedisComponentConfig, RedisComponentDefaultConfig } from './interfaces';\nimport { AwsProviderConstruct } from '@trxn/terraform-component-aws';\n\nexport class RedisComponent extends BackendServiceComponent<\n  RedisComponentConfig,\n  RedisComponentDefaultConfig\n> {\n  /**\n   * Override constructor to merge config with default config\n   */\n  constructor(\n    scope: AwsProviderConstruct,\n    id: string,\n    config: RedisComponentConfig,\n  ) {\n    super(scope, id, config, REDIS_COMPONENT_DEFAULT_CONFIG);\n  }\n\n  protected getIngressPorts(): number[] {\n    return [6379];\n  }\n\n  protected getContainers(): Container[] {\n    return [\n      new RedisContainer(this, {\n        ...this.config.containerConfig,\n        name: 'redis',\n      }),\n    ];\n  }\n\n  /**\n   * Redis service does not have a backup container, so it does not need to\n   * access itself.\n   */\n  protected shouldAccessItself(): boolean {\n    return false;\n  }\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent")," extends ",(0,i.kt)("inlineCode",{parentName:"p"},"BackendServiceComponent")," rather than ",(0,i.kt)("inlineCode",{parentName:"p"},"ServiceComponent")," because it is a backend service that requires a security group to be created in order to accept incoming connections. The ",(0,i.kt)("inlineCode",{parentName:"p"},"BackendServiceComponent")," class handles the creation of this security group, as well as other functionality related to backend services such as creating an execution role for the service."),(0,i.kt)("h2",{id:"add-the-redis-service-to-the-stack"},"Add the Redis service to the stack"),(0,i.kt)("p",null,"The file ",(0,i.kt)("inlineCode",{parentName:"p"},"main.stack.ts")," is the main file of the Terraform application. It defines an AWS stack and all the resources that should be created within this stack. These resources include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A registry group for building and publishing docker containers"),(0,i.kt)("li",{parentName:"ul"},"A zone group for managing DNS zones"),(0,i.kt)("li",{parentName:"ul"},"A network group for creating a VPC and subnets"),(0,i.kt)("li",{parentName:"ul"},"Pool groups for each environment (e.g. development, staging, production)"),(0,i.kt)("li",{parentName:"ul"},"HTTP services (e.g. PWA, admin, api)"),(0,i.kt)("li",{parentName:"ul"},"Backend services (e.g. postgres)")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MainStack")," class extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"AwsStack")," class and overrides the constructor to define all the resources. It uses helper classes (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"RegistryGroup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ZoneGroup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"NetworkGroup"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolGroup"),") to manage the creation of these resources. Each resource is added to the stack using the ",(0,i.kt)("inlineCode",{parentName:"p"},"addHttpService")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"addBackendService")," methods of the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolGroup")," class."),(0,i.kt)("p",null,"To add the ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainStack"),", you will need to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In the file ",(0,i.kt)("inlineCode",{parentName:"p"},"environment.interface.ts")," add the interface of the Redis component configuration."),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\nimport { RedisComponentPublicConfig } from '@trxn/terraform-service-redis';\n\nexport interface Environment {\n// ...\nconfig: {\n        // ...\n        /**\n         * Redis config override\n         */\n        redis?: RedisComponentPublicConfig;\n  };\n}\n\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add a field to the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppConfig")," object for the ",(0,i.kt)("inlineCode",{parentName:"p"},"redis")," service, for example:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export const AppConfig: Required<Environment['config']> = {\n  api: {},\n  pwa: {},\n  admin: {},\n  postgres: {},\n  redis: {},\n  reverseProxy: {},\n};\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Import the ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent")," at the top of the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.stack.ts")," file:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { RedisComponent } from '@trxn/terraform-service-redis';\n"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Add the ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent")," to the appropriate ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolGroup")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"MainStack")," constructor. You will need to decide which environment(s) you want to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"RedisComponent")," to, and then add it using the ",(0,i.kt)("inlineCode",{parentName:"p"},"addBackendService")," method of the ",(0,i.kt)("inlineCode",{parentName:"p"},"PoolGroup"),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// ...\n\nfor (const environment of Environments) {\n  // Merge app configs and environment configs\n  const mergedConfig = deepmerge(AppConfig, environment.config);\n\n  // Add the pool group that will host our container\n  const poolGroup = new PoolGroup(this, environment.resourceId, {\n    // ...\n  });\n\n    // ...\n\n  // Add a api as a http service\n  const api = poolGroup.addHttpService(\n    ApiComponent,\n    'api',\n    mergedConfig.api,\n  );\n\n    // ...\n\n  // Add a redis as a backend service\n  poolGroup.addBackendService(\n    RedisComponent,\n    'redis',\n    [api],\n    mergedConfig.redis,\n  );\n\n  // Store group\n  this.poolGroups.push(poolGroup);\n}\n")))),(0,i.kt)("h4",{id:"configuration-per-environments"},"Configuration per environments"),(0,i.kt)("p",null,"To set a custom configuration for the service ",(0,i.kt)("inlineCode",{parentName:"p"},"redis")," in a specific environment, for example ",(0,i.kt)("strong",{parentName:"p"},"Production"),", you can update the ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," object in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Environments")," array like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Environment } from '../interfaces';\n\nexport const Environments: Environment[] = [\n  {\n    name: 'Production',\n    resourceId: 'prod',\n    subDomain: 'www',\n    config: {\n      // ...\n      postgres: { enableBackups: true },\n      redis: {\n        containerConfig: { imageTag: 'my-custom-image-tag' },\n        desiredCount: 2,\n        cpu: '1024',\n        memory: '2048',\n      },\n    },\n  },\n  {\n    name: 'Staging',\n    resourceId: 'staging',\n    subDomain: 'staging',\n    config: {\n      // ...\n    },\n  },\n];\n")))}u.isMDXComponent=!0}}]);